{"id":"beautifier/index.ts","dependencies":[{"name":"/Users/danefitzmaurice/Projects/git-hub/bash-beautifier/lib/tsconfig.json","includedInParent":true,"mtime":1613730500902},{"name":"/Users/danefitzmaurice/Projects/git-hub/bash-beautifier/package.json","includedInParent":true,"mtime":1613730623060},{"name":"./format-instance-worker","loc":{"line":4,"column":39},"parent":"/Users/danefitzmaurice/Projects/git-hub/bash-beautifier/lib/beautifier/index.ts","resolved":"/Users/danefitzmaurice/Projects/git-hub/bash-beautifier/lib/beautifier/format-instance-worker.ts"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.format = void 0;\nvar format_instance_worker_1 = require(\"./format-instance-worker\");\n/**\n * ...\n *\n * @param data ...\n * @param path ...\n * @returns ...\n */\nfunction format(data, path) {\n    if (path === void 0) { path = ''; }\n    return format_instance_worker_1.FormatInstanceWorker.apply(data, path);\n}\nexports.format = format;\n// function init() {\n//   let errors = [];\n//\n//   const parser = argparse.ArgumentParser({\n//     description: 'A Bash beautifier for the masses'\n//   });\n//\n//   // parser.addArgument()\n//\n//   //                                              \" masses\")\n//   // parser.add_argument('--indent-size', '-i', nargs=1, type=int, default=4,\n//   //                     help=\"Sets the number of spaces to be used in \"\n//   //                          \"indentation.\")\n//   // parser.add_argument('--files', '-f', nargs='*',\n//   //                     help=\"Files to be beautified.\")\n//   // parser.add_argument('--backup', '-b', action='store_true',\n//   //                     help=\"Beautysh will create a backup file in the \"\n//   //                          \"same path as the original.\")\n//   // parser.add_argument('--this.tab', '-t', action='store_true',\n//   //                     help=\"Sets indentation to tabs instead of spaces\")\n//   // args = parser.parse_args()\n//\n//   args = parser.parseArgs();\n//\n//   if (process.env.argv.length < 2) {\n//     // parser.print_help()\n//     return;\n//   }\n//\n//   if (Array.isArray(args.indentSize)) {\n//     args.indentSize = args.indentSize[0];\n//     this.tabSize = args.indentSize;\n//     this.backup = args.backup;\n//   }\n//\n//   if (args.this.tab) {\n//     this.tabSize = 1;\n//     this.tabStr = '\\t';\n//   }\n//\n//   for (let pth of args.files) {\n//     try {\n//       this.beautifyFile(pth);\n//     } catch (err) {\n//       errors.push(err);\n//     }\n//   }\n//\n//   console.log('Process finished!');\n//\n//   if (errors.length) {\n//     console.log(`Errors:\\n`, ...errors);\n//   }\n// }\n// beautifyFile(path) {\n//   let error = false;\n//\n//   if (path == '-') {\n//     logr('Path is dash');\n//\n//     let data = process.stdin.read();\n//\n//     let result,\n//       error = this.beautifyString(data, '(stdin)');\n//     process.stdout.write(result);\n//   } else {\n//     // named file\n//     logr('Path is not dash');\n//\n//     let data = this.readFile(path);\n//     let result,\n//       error = this.beautifyString(data, path);\n//\n//     logr(result);\n//\n//     if (data != result) {\n//       logr('data != result');\n//\n//       if (this.backup) {\n//         logr('this.backup');\n//         logr(path);\n//\n//         this.writeFile(path + '.bak', data);\n//       }\n//\n//       this.writeFile(path, result);\n//     }\n//   }\n//\n//   return error;\n// }\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["beautifier/index.ts"],"names":[],"mappings":";;;AAAA,mEAAgE;AAEhE;;;;;;GAMG;AACH,SAAgB,MAAM,CAAC,IAAY,EAAE,IAAS;IAAT,qBAAA,EAAA,SAAS;IAC5C,OAAO,6CAAoB,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAChD,CAAC;AAFD,wBAEC;AAED,oBAAoB;AACpB,qBAAqB;AACrB,EAAE;AACF,6CAA6C;AAC7C,sDAAsD;AACtD,QAAQ;AACR,EAAE;AACF,4BAA4B;AAC5B,EAAE;AACF,+DAA+D;AAC/D,gFAAgF;AAChF,2EAA2E;AAC3E,gDAAgD;AAChD,uDAAuD;AACvD,2DAA2D;AAC3D,kEAAkE;AAClE,6EAA6E;AAC7E,8DAA8D;AAC9D,oEAAoE;AACpE,8EAA8E;AAC9E,kCAAkC;AAClC,EAAE;AACF,+BAA+B;AAC/B,EAAE;AACF,uCAAuC;AACvC,6BAA6B;AAC7B,cAAc;AACd,MAAM;AACN,EAAE;AACF,0CAA0C;AAC1C,4CAA4C;AAC5C,sCAAsC;AACtC,iCAAiC;AACjC,MAAM;AACN,EAAE;AACF,yBAAyB;AACzB,wBAAwB;AACxB,0BAA0B;AAC1B,MAAM;AACN,EAAE;AACF,kCAAkC;AAClC,YAAY;AACZ,gCAAgC;AAChC,sBAAsB;AACtB,0BAA0B;AAC1B,QAAQ;AACR,MAAM;AACN,EAAE;AACF,sCAAsC;AACtC,EAAE;AACF,yBAAyB;AACzB,2CAA2C;AAC3C,MAAM;AACN,IAAI;AAEJ,uBAAuB;AACvB,uBAAuB;AACvB,EAAE;AACF,uBAAuB;AACvB,4BAA4B;AAC5B,EAAE;AACF,uCAAuC;AACvC,EAAE;AACF,kBAAkB;AAClB,sDAAsD;AACtD,oCAAoC;AACpC,aAAa;AACb,oBAAoB;AACpB,gCAAgC;AAChC,EAAE;AACF,sCAAsC;AACtC,kBAAkB;AAClB,iDAAiD;AACjD,EAAE;AACF,oBAAoB;AACpB,EAAE;AACF,4BAA4B;AAC5B,gCAAgC;AAChC,EAAE;AACF,2BAA2B;AAC3B,+BAA+B;AAC/B,sBAAsB;AACtB,EAAE;AACF,+CAA+C;AAC/C,UAAU;AACV,EAAE;AACF,sCAAsC;AACtC,QAAQ;AACR,MAAM;AACN,EAAE;AACF,kBAAkB;AAClB,IAAI","sourcesContent":["import { FormatInstanceWorker } from './format-instance-worker';\n\n/**\n * ...\n *\n * @param data ...\n * @param path ...\n * @returns ...\n */\nexport function format(data: string, path = '') {\n  return FormatInstanceWorker.apply(data, path);\n}\n\n// function init() {\n//   let errors = [];\n//\n//   const parser = argparse.ArgumentParser({\n//     description: 'A Bash beautifier for the masses'\n//   });\n//\n//   // parser.addArgument()\n//\n//   //                                              \" masses\")\n//   // parser.add_argument('--indent-size', '-i', nargs=1, type=int, default=4,\n//   //                     help=\"Sets the number of spaces to be used in \"\n//   //                          \"indentation.\")\n//   // parser.add_argument('--files', '-f', nargs='*',\n//   //                     help=\"Files to be beautified.\")\n//   // parser.add_argument('--backup', '-b', action='store_true',\n//   //                     help=\"Beautysh will create a backup file in the \"\n//   //                          \"same path as the original.\")\n//   // parser.add_argument('--this.tab', '-t', action='store_true',\n//   //                     help=\"Sets indentation to tabs instead of spaces\")\n//   // args = parser.parse_args()\n//\n//   args = parser.parseArgs();\n//\n//   if (process.env.argv.length < 2) {\n//     // parser.print_help()\n//     return;\n//   }\n//\n//   if (Array.isArray(args.indentSize)) {\n//     args.indentSize = args.indentSize[0];\n//     this.tabSize = args.indentSize;\n//     this.backup = args.backup;\n//   }\n//\n//   if (args.this.tab) {\n//     this.tabSize = 1;\n//     this.tabStr = '\\t';\n//   }\n//\n//   for (let pth of args.files) {\n//     try {\n//       this.beautifyFile(pth);\n//     } catch (err) {\n//       errors.push(err);\n//     }\n//   }\n//\n//   console.log('Process finished!');\n//\n//   if (errors.length) {\n//     console.log(`Errors:\\n`, ...errors);\n//   }\n// }\n\n// beautifyFile(path) {\n//   let error = false;\n//\n//   if (path == '-') {\n//     logr('Path is dash');\n//\n//     let data = process.stdin.read();\n//\n//     let result,\n//       error = this.beautifyString(data, '(stdin)');\n//     process.stdout.write(result);\n//   } else {\n//     // named file\n//     logr('Path is not dash');\n//\n//     let data = this.readFile(path);\n//     let result,\n//       error = this.beautifyString(data, path);\n//\n//     logr(result);\n//\n//     if (data != result) {\n//       logr('data != result');\n//\n//       if (this.backup) {\n//         logr('this.backup');\n//         logr(path);\n//\n//         this.writeFile(path + '.bak', data);\n//       }\n//\n//       this.writeFile(path, result);\n//     }\n//   }\n//\n//   return error;\n// }\n"]}},"error":null,"hash":"d588ce1331187a439560349fad7f5ba4","cacheData":{"env":{}}}