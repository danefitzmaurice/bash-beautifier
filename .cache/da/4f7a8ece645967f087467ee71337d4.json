{"id":"beautifier/snippet.ts","dependencies":[{"name":"/Users/danefitzmaurice/Projects/git-hub/bash-beautifier/lib/tsconfig.json","includedInParent":true,"mtime":1613730500902},{"name":"/Users/danefitzmaurice/Projects/git-hub/bash-beautifier/package.json","includedInParent":true,"mtime":1613730623060}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Snippet = void 0;\n/**\n *  ...\n */\nvar Snippet = /** @class */ (function () {\n    function Snippet(source) {\n        this.source = source;\n    }\n    Object.defineProperty(Snippet.prototype, \"src\", {\n        get: function () {\n            return this.source;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     *  ...\n     */\n    Snippet.prototype.occurrences = function (pattern) {\n        var _a, _b;\n        return (_b = (_a = this.source.match(pattern)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;\n    };\n    /**\n     *  ...\n     */\n    Snippet.prototype.contains = function (pattern) {\n        return pattern instanceof RegExp\n            ? pattern.test(this.source)\n            : this.source.includes(pattern);\n    };\n    /**\n     *  ...\n     */\n    Snippet.prototype.replace = function (searchValue, replaceValue) {\n        replaceValue =\n            typeof replaceValue === 'string' ? replaceValue : replaceValue.src;\n        return new Snippet(this.source.replace(searchValue, replaceValue));\n    };\n    /**\n     *  ...\n     */\n    Snippet.prototype.sub = function (searchValue, replaceValue, count) {\n        if (count === void 0) { count = 0; }\n        replaceValue =\n            typeof replaceValue === 'string' ? replaceValue : replaceValue.src;\n        return new Snippet(this.source.replace(searchValue, replaceValue));\n    };\n    Snippet.prototype.strip = function () {\n        return new Snippet(this.source.trim());\n    };\n    /**\n     *  ...\n     */\n    Snippet.prototype.clone = function () {\n        return new Snippet(this.source);\n    };\n    return Snippet;\n}());\nexports.Snippet = Snippet;\n"},"sourceMaps":{"js":{"version":3,"file":"snippet.js","sourceRoot":"","sources":["beautifier/snippet.ts"],"names":[],"mappings":";;;AAAA;;GAEG;AACH;IAKE,iBAAoB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;IAAG,CAAC;IAJtC,sBAAI,wBAAG;aAAP;YACE,OAAO,IAAI,CAAC,MAAM,CAAC;QACrB,CAAC;;;OAAA;IAID;;OAEG;IACH,6BAAW,GAAX,UAAY,OAAe;;QACzB,mBAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,0CAAE,MAAM,mCAAI,CAAC,CAAC;IACjD,CAAC;IAED;;OAEG;IACH,0BAAQ,GAAR,UAAS,OAAwB;QAC/B,OAAO,OAAO,YAAY,MAAM;YAC9B,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;YAC3B,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,yBAAO,GAAP,UAAQ,WAA4B,EAAE,YAA8B;QAClE,YAAY;YACV,OAAO,YAAY,KAAK,QAAQ,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC;QAErE,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC,CAAC;IACrE,CAAC;IAED;;OAEG;IACH,qBAAG,GAAH,UAAI,WAA4B,EAAE,YAA8B,EAAE,KAAS;QAAT,sBAAA,EAAA,SAAS;QACzE,YAAY;YACV,OAAO,YAAY,KAAK,QAAQ,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC;QAErE,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC,CAAC;IACrE,CAAC;IAED,uBAAK,GAAL;QACE,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;IACzC,CAAC;IAED;;OAEG;IACH,uBAAK,GAAL;QACE,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IACH,cAAC;AAAD,CAAC,AArDD,IAqDC;AArDY,0BAAO","sourcesContent":["/**\n *  ...\n */\nexport class Snippet {\n  get src() {\n    return this.source;\n  }\n\n  constructor(private source: string) {}\n\n  /**\n   *  ...\n   */\n  occurrences(pattern: RegExp) {\n    return this.source.match(pattern)?.length ?? 0;\n  }\n\n  /**\n   *  ...\n   */\n  contains(pattern: string | RegExp) {\n    return pattern instanceof RegExp\n      ? pattern.test(this.source)\n      : this.source.includes(pattern);\n  }\n\n  /**\n   *  ...\n   */\n  replace(searchValue: string | RegExp, replaceValue: string | Snippet) {\n    replaceValue =\n      typeof replaceValue === 'string' ? replaceValue : replaceValue.src;\n\n    return new Snippet(this.source.replace(searchValue, replaceValue));\n  }\n\n  /**\n   *  ...\n   */\n  sub(searchValue: string | RegExp, replaceValue: string | Snippet, count = 0) {\n    replaceValue =\n      typeof replaceValue === 'string' ? replaceValue : replaceValue.src;\n\n    return new Snippet(this.source.replace(searchValue, replaceValue));\n  }\n\n  strip() {\n    return new Snippet(this.source.trim());\n  }\n\n  /**\n   *  ...\n   */\n  clone() {\n    return new Snippet(this.source);\n  }\n}\n"]}},"error":null,"hash":"f9abcc3c0968b767c734fdd47adb1675","cacheData":{"env":{}}}